# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SkiSlopePluginDockWidget
                                 A QGIS plugin
 Plugin pro vyhledání vhodným míst pro umístění sjezdovek
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-06-05
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Tomáš Mlejnek, Jana Tomášková
        email                : mlejntom@cvut.cz, tomasj15@cvut.cz
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.core import QgsProject, QgsProcessingFeedback
from qgis import processing

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Ski_Slope_Plugin_dockwidget_base.ui'))


class SkiSlopePluginDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(SkiSlopePluginDockWidget, self).__init__(parent)
        self.setupUi(self)
        self.runButton.clicked.connect(self.run_model)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def run_model(self):
        laz_layer = self.lazLayerComboBox.currentLayer()
        silnice_layer = self.silniceComboBox.currentLayer()
        budovy_layer = self.budovyComboBox.currentLayer()
        zeleznice_layer = self.zelezniceComboBox.currentLayer()
        chr_uzemi_layer = self.chranenaComboBox.currentLayer()
        vodni_t_layer = self.vodniComboBox.currentLayer()

        if not all([laz_layer, silnice_layer, budovy_layer, zeleznice_layer, chr_uzemi_layer, vodni_t_layer]):
            QtWidgets.QMessageBox.warning(self, "Chybějící vstup", "Vyber všechny požadované vrstvy.")
            return

        params = {
            'laz': laz_layer,
            'silnice': silnice_layer,
            'budovy': budovy_layer,
            'zeleznice': zeleznice_layer,
            'chranenna_uzemi': chr_uzemi_layer,
            'vodnitoky': vodni_t_layer,
            'Vyselektovaneuzemi': 'memory:',
            'Vysledekrastru': 'memory:'
        }

        feedback = QgsProcessingFeedback()

        try:
            result = processing.run('my_models:model_komplet', params, feedback=feedback)

            if result:
                vyselektovane = result['Vyselektovaneuzemi']
                vysledek_rastru = result['Vysledekrastru']

                vyselektovane.setName("Vybrané území pro umístění sjezdovky")
                vysledek_rastru.setName("Vybrané území dle sklonu")

                QgsProject.instance().addMapLayer(vysledek_rastru)
                QgsProject.instance().addMapLayer(vyselektovane)

                QtWidgets.QMessageBox.information(self, "Hotovo", "Model úspěšně dokončen.")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Chyba", f"Nastala chyba při spuštění modelu:\n{str(e)}")
